{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be a real-valued function on \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QLet our exploration begins with real-valued functions defined on real numbers.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be an accumulate point of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and suppose that\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QOne simple yet useful observation of a longest path in a graph is that all the neighbors of the terminus must occur along the path.\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QThen the problem of finding a shortest path from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q arises quite naturally if we want to travel from city \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to city \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q at the minimum cost.\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QA simple weighted graph \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a source \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q A dictionary \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q containing the lengths of shortest paths from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a dictionary \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q of predecessors of all vertices \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has a loop \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q pick a vertex \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q pick \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and let \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be the corresponding edge, i.e., \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is not in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q pick \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q such that there exists an edge \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q satisfying \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q remove from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q all vertices and edges before \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Dijkstra's Algorithm\\E$"}
